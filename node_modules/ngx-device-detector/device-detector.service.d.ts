import { ReTree } from './retree';
import * as ɵngcc0 from '@angular/core';
export interface DeviceInfo {
    userAgent: string;
    os: string;
    browser: string;
    device: string;
    os_version: string;
    browser_version: string;
}
export declare class DeviceDetectorService {
    private platformId;
    ua: string;
    userAgent: string;
    os: string;
    browser: string;
    device: string;
    os_version: string;
    browser_version: string;
    reTree: ReTree;
    constructor(platformId: any);
    /**
     * @author Ahsan Ayaz
     * @desc Sets the initial value of the device when the service is initiated.
     * This value is later accessible for usage
     */
    setDeviceInfo(ua?: string): void;
    /**
     * @author Ahsan Ayaz
     * @desc Returns the device information
     * @returns the device information object.
     */
    getDeviceInfo(): DeviceInfo;
    /**
     * @author Ahsan Ayaz
     * @desc Compares the current device info with the mobile devices to check
     * if the current device is a mobile and also check current device is tablet so it will return false.
     * @returns whether the current device is a mobile
     */
    isMobile(userAgent?: string): boolean;
    /**
     * @author Ahsan Ayaz
     * @desc Compares the current device info with the tablet devices to check
     * if the current device is a tablet.
     * @returns whether the current device is a tablet
     */
    isTablet(userAgent?: string): boolean;
    /**
     * @author Ahsan Ayaz
     * @desc Compares the current device info with the desktop devices to check
     * if the current device is a desktop device.
     * @returns whether the current device is a desktop device
     */
    isDesktop(userAgent?: string): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DeviceDetectorService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<DeviceDetectorService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlLWRldGVjdG9yLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZGV2aWNlLWRldGVjdG9yLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSZVRyZWUgfSBmcm9tICcuL3JldHJlZSc7XHJcbmV4cG9ydCBpbnRlcmZhY2UgRGV2aWNlSW5mbyB7XHJcbiAgICB1c2VyQWdlbnQ6IHN0cmluZztcclxuICAgIG9zOiBzdHJpbmc7XHJcbiAgICBicm93c2VyOiBzdHJpbmc7XHJcbiAgICBkZXZpY2U6IHN0cmluZztcclxuICAgIG9zX3ZlcnNpb246IHN0cmluZztcclxuICAgIGJyb3dzZXJfdmVyc2lvbjogc3RyaW5nO1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIERldmljZURldGVjdG9yU2VydmljZSB7XHJcbiAgICBwcml2YXRlIHBsYXRmb3JtSWQ7XHJcbiAgICB1YTogc3RyaW5nO1xyXG4gICAgdXNlckFnZW50OiBzdHJpbmc7XHJcbiAgICBvczogc3RyaW5nO1xyXG4gICAgYnJvd3Nlcjogc3RyaW5nO1xyXG4gICAgZGV2aWNlOiBzdHJpbmc7XHJcbiAgICBvc192ZXJzaW9uOiBzdHJpbmc7XHJcbiAgICBicm93c2VyX3ZlcnNpb246IHN0cmluZztcclxuICAgIHJlVHJlZTogUmVUcmVlO1xyXG4gICAgY29uc3RydWN0b3IocGxhdGZvcm1JZDogYW55KTtcclxuICAgIC8qKlxyXG4gICAgICogQGF1dGhvciBBaHNhbiBBeWF6XHJcbiAgICAgKiBAZGVzYyBTZXRzIHRoZSBpbml0aWFsIHZhbHVlIG9mIHRoZSBkZXZpY2Ugd2hlbiB0aGUgc2VydmljZSBpcyBpbml0aWF0ZWQuXHJcbiAgICAgKiBUaGlzIHZhbHVlIGlzIGxhdGVyIGFjY2Vzc2libGUgZm9yIHVzYWdlXHJcbiAgICAgKi9cclxuICAgIHNldERldmljZUluZm8odWE/OiBzdHJpbmcpOiB2b2lkO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAYXV0aG9yIEFoc2FuIEF5YXpcclxuICAgICAqIEBkZXNjIFJldHVybnMgdGhlIGRldmljZSBpbmZvcm1hdGlvblxyXG4gICAgICogQHJldHVybnMgdGhlIGRldmljZSBpbmZvcm1hdGlvbiBvYmplY3QuXHJcbiAgICAgKi9cclxuICAgIGdldERldmljZUluZm8oKTogRGV2aWNlSW5mbztcclxuICAgIC8qKlxyXG4gICAgICogQGF1dGhvciBBaHNhbiBBeWF6XHJcbiAgICAgKiBAZGVzYyBDb21wYXJlcyB0aGUgY3VycmVudCBkZXZpY2UgaW5mbyB3aXRoIHRoZSBtb2JpbGUgZGV2aWNlcyB0byBjaGVja1xyXG4gICAgICogaWYgdGhlIGN1cnJlbnQgZGV2aWNlIGlzIGEgbW9iaWxlIGFuZCBhbHNvIGNoZWNrIGN1cnJlbnQgZGV2aWNlIGlzIHRhYmxldCBzbyBpdCB3aWxsIHJldHVybiBmYWxzZS5cclxuICAgICAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgZGV2aWNlIGlzIGEgbW9iaWxlXHJcbiAgICAgKi9cclxuICAgIGlzTW9iaWxlKHVzZXJBZ2VudD86IHN0cmluZyk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEBhdXRob3IgQWhzYW4gQXlhelxyXG4gICAgICogQGRlc2MgQ29tcGFyZXMgdGhlIGN1cnJlbnQgZGV2aWNlIGluZm8gd2l0aCB0aGUgdGFibGV0IGRldmljZXMgdG8gY2hlY2tcclxuICAgICAqIGlmIHRoZSBjdXJyZW50IGRldmljZSBpcyBhIHRhYmxldC5cclxuICAgICAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgZGV2aWNlIGlzIGEgdGFibGV0XHJcbiAgICAgKi9cclxuICAgIGlzVGFibGV0KHVzZXJBZ2VudD86IHN0cmluZyk6IGJvb2xlYW47XHJcbiAgICAvKipcclxuICAgICAqIEBhdXRob3IgQWhzYW4gQXlhelxyXG4gICAgICogQGRlc2MgQ29tcGFyZXMgdGhlIGN1cnJlbnQgZGV2aWNlIGluZm8gd2l0aCB0aGUgZGVza3RvcCBkZXZpY2VzIHRvIGNoZWNrXHJcbiAgICAgKiBpZiB0aGUgY3VycmVudCBkZXZpY2UgaXMgYSBkZXNrdG9wIGRldmljZS5cclxuICAgICAqIEByZXR1cm5zIHdoZXRoZXIgdGhlIGN1cnJlbnQgZGV2aWNlIGlzIGEgZGVza3RvcCBkZXZpY2VcclxuICAgICAqL1xyXG4gICAgaXNEZXNrdG9wKHVzZXJBZ2VudD86IHN0cmluZyk6IGJvb2xlYW47XHJcbn1cclxuIl19